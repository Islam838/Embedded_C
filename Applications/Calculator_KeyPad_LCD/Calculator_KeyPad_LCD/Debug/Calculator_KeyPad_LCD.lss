
Calculator_KeyPad_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000004ae  00000522  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000055c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f75  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000886  00000000  00000000  000015bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000884  00000000  00000000  00001e43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  000026c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000460  00000000  00000000  000027c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004e5  00000000  00000000  00002c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000310d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <main>
  7a:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_VoidInit>:
#include "DIO_priv.h"
#include "stdbool.h"


void DIO_VoidInit(void){
	DDRA = DIO_u8_PORTA_DIR;
  82:	80 ef       	ldi	r24, 0xF0	; 240
  84:	8a bb       	out	0x1a, r24	; 26
	DDRB = DIO_u8_PORTB_DIR;
  86:	8e ef       	ldi	r24, 0xFE	; 254
  88:	87 bb       	out	0x17, r24	; 23
	DDRC = DIO_u8_PORTC_DIR;
  8a:	14 ba       	out	0x14, r1	; 20
	DDRD = DIO_u8_PORTD_DIR;
  8c:	11 ba       	out	0x11, r1	; 17
  8e:	08 95       	ret

00000090 <DIO_VoidSetPinValue>:
}

void DIO_VoidSetPinValue(u8 DIO_u8Port , u8 DIO_u8Pin , u8 DIO_u8Val){
	switch(DIO_u8Port)
  90:	86 30       	cpi	r24, 0x06	; 6
  92:	29 f1       	breq	.+74     	; 0xde <DIO_VoidSetPinValue+0x4e>
  94:	18 f4       	brcc	.+6      	; 0x9c <DIO_VoidSetPinValue+0xc>
  96:	85 30       	cpi	r24, 0x05	; 5
  98:	39 f0       	breq	.+14     	; 0xa8 <DIO_VoidSetPinValue+0x18>
  9a:	08 95       	ret
  9c:	87 30       	cpi	r24, 0x07	; 7
  9e:	d1 f1       	breq	.+116    	; 0x114 <DIO_VoidSetPinValue+0x84>
  a0:	88 30       	cpi	r24, 0x08	; 8
  a2:	09 f4       	brne	.+2      	; 0xa6 <DIO_VoidSetPinValue+0x16>
  a4:	52 c0       	rjmp	.+164    	; 0x14a <DIO_VoidSetPinValue+0xba>
  a6:	08 95       	ret
	{
		case DIO_u8_PORTA:
			if(DIO_u8Val == DIO_PIN_HIGH)
  a8:	41 30       	cpi	r20, 0x01	; 1
  aa:	59 f4       	brne	.+22     	; 0xc2 <DIO_VoidSetPinValue+0x32>
				SET_BIT(PORTA, DIO_u8Pin);
  ac:	2b b3       	in	r18, 0x1b	; 27
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_VoidSetPinValue+0x28>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_VoidSetPinValue+0x24>
  bc:	82 2b       	or	r24, r18
  be:	8b bb       	out	0x1b, r24	; 27
  c0:	08 95       	ret
			else if(DIO_u8Val == DIO_PIN_LOW)
  c2:	41 11       	cpse	r20, r1
  c4:	5c c0       	rjmp	.+184    	; 0x17e <DIO_VoidSetPinValue+0xee>
				CLEAR_BIT(PORTA, DIO_u8Pin);
  c6:	2b b3       	in	r18, 0x1b	; 27
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_VoidSetPinValue+0x42>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_VoidSetPinValue+0x3e>
  d6:	80 95       	com	r24
  d8:	82 23       	and	r24, r18
  da:	8b bb       	out	0x1b, r24	; 27
  dc:	08 95       	ret
			break;
		case DIO_u8_PORTB:
			if(DIO_u8Val == DIO_PIN_HIGH)
  de:	41 30       	cpi	r20, 0x01	; 1
  e0:	59 f4       	brne	.+22     	; 0xf8 <DIO_VoidSetPinValue+0x68>
				SET_BIT(PORTB, DIO_u8Pin);
  e2:	28 b3       	in	r18, 0x18	; 24
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <DIO_VoidSetPinValue+0x5e>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <DIO_VoidSetPinValue+0x5a>
  f2:	82 2b       	or	r24, r18
  f4:	88 bb       	out	0x18, r24	; 24
  f6:	08 95       	ret
			else if(DIO_u8Val == DIO_PIN_LOW)
  f8:	41 11       	cpse	r20, r1
  fa:	41 c0       	rjmp	.+130    	; 0x17e <DIO_VoidSetPinValue+0xee>
				CLEAR_BIT(PORTB, DIO_u8Pin);
  fc:	28 b3       	in	r18, 0x18	; 24
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_VoidSetPinValue+0x78>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_VoidSetPinValue+0x74>
 10c:	80 95       	com	r24
 10e:	82 23       	and	r24, r18
 110:	88 bb       	out	0x18, r24	; 24
 112:	08 95       	ret
			break;
		case DIO_u8_PORTC:
			if(DIO_u8Val == DIO_PIN_HIGH)
 114:	41 30       	cpi	r20, 0x01	; 1
 116:	59 f4       	brne	.+22     	; 0x12e <DIO_VoidSetPinValue+0x9e>
				SET_BIT(PORTC, DIO_u8Pin);
 118:	25 b3       	in	r18, 0x15	; 21
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_VoidSetPinValue+0x94>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_VoidSetPinValue+0x90>
 128:	82 2b       	or	r24, r18
 12a:	85 bb       	out	0x15, r24	; 21
 12c:	08 95       	ret
			else if(DIO_u8Val == DIO_PIN_LOW)
 12e:	41 11       	cpse	r20, r1
 130:	26 c0       	rjmp	.+76     	; 0x17e <DIO_VoidSetPinValue+0xee>
				CLEAR_BIT(PORTC, DIO_u8Pin);
 132:	25 b3       	in	r18, 0x15	; 21
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_VoidSetPinValue+0xae>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_VoidSetPinValue+0xaa>
 142:	80 95       	com	r24
 144:	82 23       	and	r24, r18
 146:	85 bb       	out	0x15, r24	; 21
 148:	08 95       	ret
			break;
		case DIO_u8_PORTD:
			if(DIO_u8Val == DIO_PIN_HIGH)
 14a:	41 30       	cpi	r20, 0x01	; 1
 14c:	59 f4       	brne	.+22     	; 0x164 <DIO_VoidSetPinValue+0xd4>
				SET_BIT(PORTD, DIO_u8Pin);
 14e:	22 b3       	in	r18, 0x12	; 18
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_VoidSetPinValue+0xca>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_VoidSetPinValue+0xc6>
 15e:	82 2b       	or	r24, r18
 160:	82 bb       	out	0x12, r24	; 18
 162:	08 95       	ret
			else if(DIO_u8Val == DIO_PIN_LOW)
 164:	41 11       	cpse	r20, r1
 166:	0b c0       	rjmp	.+22     	; 0x17e <DIO_VoidSetPinValue+0xee>
				CLEAR_BIT(PORTD, DIO_u8Pin);
 168:	22 b3       	in	r18, 0x12	; 18
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_VoidSetPinValue+0xe4>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_VoidSetPinValue+0xe0>
 178:	80 95       	com	r24
 17a:	82 23       	and	r24, r18
 17c:	82 bb       	out	0x12, r24	; 18
 17e:	08 95       	ret

00000180 <KeyPad_Init>:
#define RawPort PORTB
#define ColumnPort PORTC
#define ReadCol PINC

void KeyPad_Init(void){
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN4, DIO_PIN_LOW);
 180:	88 b3       	in	r24, 0x18	; 24
 182:	40 e0       	ldi	r20, 0x00	; 0
 184:	64 e0       	ldi	r22, 0x04	; 4
 186:	0e 94 48 00 	call	0x90	; 0x90 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN5, DIO_PIN_LOW);
 18a:	88 b3       	in	r24, 0x18	; 24
 18c:	40 e0       	ldi	r20, 0x00	; 0
 18e:	65 e0       	ldi	r22, 0x05	; 5
 190:	0e 94 48 00 	call	0x90	; 0x90 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN6, DIO_PIN_LOW);
 194:	88 b3       	in	r24, 0x18	; 24
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	66 e0       	ldi	r22, 0x06	; 6
 19a:	0e 94 48 00 	call	0x90	; 0x90 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN7, DIO_PIN_LOW);
 19e:	88 b3       	in	r24, 0x18	; 24
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	67 e0       	ldi	r22, 0x07	; 7
 1a4:	0e 94 48 00 	call	0x90	; 0x90 <DIO_VoidSetPinValue>
	
	DIO_VoidSetPinValue(ColumnPort, DIO_u8_PIN3, DIO_PIN_HIGH);
 1a8:	85 b3       	in	r24, 0x15	; 21
 1aa:	41 e0       	ldi	r20, 0x01	; 1
 1ac:	63 e0       	ldi	r22, 0x03	; 3
 1ae:	0e 94 48 00 	call	0x90	; 0x90 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(ColumnPort, DIO_u8_PIN4, DIO_PIN_HIGH);
 1b2:	85 b3       	in	r24, 0x15	; 21
 1b4:	41 e0       	ldi	r20, 0x01	; 1
 1b6:	64 e0       	ldi	r22, 0x04	; 4
 1b8:	0e 94 48 00 	call	0x90	; 0x90 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(ColumnPort, DIO_u8_PIN5, DIO_PIN_HIGH);
 1bc:	85 b3       	in	r24, 0x15	; 21
 1be:	41 e0       	ldi	r20, 0x01	; 1
 1c0:	65 e0       	ldi	r22, 0x05	; 5
 1c2:	0e 94 48 00 	call	0x90	; 0x90 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(ColumnPort, DIO_u8_PIN6, DIO_PIN_HIGH);
 1c6:	85 b3       	in	r24, 0x15	; 21
 1c8:	41 e0       	ldi	r20, 0x01	; 1
 1ca:	66 e0       	ldi	r22, 0x06	; 6
 1cc:	0e 94 48 00 	call	0x90	; 0x90 <DIO_VoidSetPinValue>
 1d0:	08 95       	ret

000001d2 <Kpad_RetVal>:
}

u8 Kpad_RetVal(void){
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN4, DIO_PIN_LOW);
 1d2:	88 b3       	in	r24, 0x18	; 24
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	64 e0       	ldi	r22, 0x04	; 4
 1d8:	0e 94 48 00 	call	0x90	; 0x90 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN5, DIO_PIN_HIGH);
 1dc:	88 b3       	in	r24, 0x18	; 24
 1de:	41 e0       	ldi	r20, 0x01	; 1
 1e0:	65 e0       	ldi	r22, 0x05	; 5
 1e2:	0e 94 48 00 	call	0x90	; 0x90 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN6, DIO_PIN_HIGH);
 1e6:	88 b3       	in	r24, 0x18	; 24
 1e8:	41 e0       	ldi	r20, 0x01	; 1
 1ea:	66 e0       	ldi	r22, 0x06	; 6
 1ec:	0e 94 48 00 	call	0x90	; 0x90 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN7, DIO_PIN_HIGH);
 1f0:	88 b3       	in	r24, 0x18	; 24
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	67 e0       	ldi	r22, 0x07	; 7
 1f6:	0e 94 48 00 	call	0x90	; 0x90 <DIO_VoidSetPinValue>
	
	if((ReadCol & (1<<3)) == 0) return R1C1;
 1fa:	9b 9b       	sbis	0x13, 3	; 19
 1fc:	5c c0       	rjmp	.+184    	; 0x2b6 <Kpad_RetVal+0xe4>
	else if((ReadCol & (1<<4)) == 0) return R1C2;
 1fe:	9c 9b       	sbis	0x13, 4	; 19
 200:	5c c0       	rjmp	.+184    	; 0x2ba <Kpad_RetVal+0xe8>
	else if((ReadCol & (1<<5)) == 0) return R1C3;
 202:	9d 9b       	sbis	0x13, 5	; 19
 204:	5c c0       	rjmp	.+184    	; 0x2be <Kpad_RetVal+0xec>
	else if((ReadCol & (1<<6)) == 0) return R1C4;
 206:	9e 9b       	sbis	0x13, 6	; 19
 208:	5c c0       	rjmp	.+184    	; 0x2c2 <Kpad_RetVal+0xf0>
	
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN4, DIO_PIN_HIGH);
 20a:	88 b3       	in	r24, 0x18	; 24
 20c:	41 e0       	ldi	r20, 0x01	; 1
 20e:	64 e0       	ldi	r22, 0x04	; 4
 210:	0e 94 48 00 	call	0x90	; 0x90 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN5, DIO_PIN_LOW);
 214:	88 b3       	in	r24, 0x18	; 24
 216:	40 e0       	ldi	r20, 0x00	; 0
 218:	65 e0       	ldi	r22, 0x05	; 5
 21a:	0e 94 48 00 	call	0x90	; 0x90 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN6, DIO_PIN_HIGH);
 21e:	88 b3       	in	r24, 0x18	; 24
 220:	41 e0       	ldi	r20, 0x01	; 1
 222:	66 e0       	ldi	r22, 0x06	; 6
 224:	0e 94 48 00 	call	0x90	; 0x90 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN7, DIO_PIN_HIGH);
 228:	88 b3       	in	r24, 0x18	; 24
 22a:	41 e0       	ldi	r20, 0x01	; 1
 22c:	67 e0       	ldi	r22, 0x07	; 7
 22e:	0e 94 48 00 	call	0x90	; 0x90 <DIO_VoidSetPinValue>
	
	if((ReadCol & (1<<3)) == 0) return R2C1;
 232:	9b 9b       	sbis	0x13, 3	; 19
 234:	48 c0       	rjmp	.+144    	; 0x2c6 <Kpad_RetVal+0xf4>
	else if((ReadCol & (1<<4)) == 0) return R2C2;
 236:	9c 9b       	sbis	0x13, 4	; 19
 238:	48 c0       	rjmp	.+144    	; 0x2ca <Kpad_RetVal+0xf8>
	else if((ReadCol & (1<<5)) == 0) return R2C3;
 23a:	9d 9b       	sbis	0x13, 5	; 19
 23c:	48 c0       	rjmp	.+144    	; 0x2ce <Kpad_RetVal+0xfc>
	else if((ReadCol & (1<<6)) == 0) return R2C4;
 23e:	9e 9b       	sbis	0x13, 6	; 19
 240:	48 c0       	rjmp	.+144    	; 0x2d2 <Kpad_RetVal+0x100>
	
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN4, DIO_PIN_HIGH);
 242:	88 b3       	in	r24, 0x18	; 24
 244:	41 e0       	ldi	r20, 0x01	; 1
 246:	64 e0       	ldi	r22, 0x04	; 4
 248:	0e 94 48 00 	call	0x90	; 0x90 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN5, DIO_PIN_HIGH);
 24c:	88 b3       	in	r24, 0x18	; 24
 24e:	41 e0       	ldi	r20, 0x01	; 1
 250:	65 e0       	ldi	r22, 0x05	; 5
 252:	0e 94 48 00 	call	0x90	; 0x90 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN6, DIO_PIN_LOW);
 256:	88 b3       	in	r24, 0x18	; 24
 258:	40 e0       	ldi	r20, 0x00	; 0
 25a:	66 e0       	ldi	r22, 0x06	; 6
 25c:	0e 94 48 00 	call	0x90	; 0x90 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN7, DIO_PIN_HIGH);
 260:	88 b3       	in	r24, 0x18	; 24
 262:	41 e0       	ldi	r20, 0x01	; 1
 264:	67 e0       	ldi	r22, 0x07	; 7
 266:	0e 94 48 00 	call	0x90	; 0x90 <DIO_VoidSetPinValue>
	
	if((ReadCol & (1<<3)) == 0) return R3C1;
 26a:	9b 9b       	sbis	0x13, 3	; 19
 26c:	34 c0       	rjmp	.+104    	; 0x2d6 <Kpad_RetVal+0x104>
	else if((ReadCol & (1<<4)) == 0) return R3C2;
 26e:	9c 9b       	sbis	0x13, 4	; 19
 270:	34 c0       	rjmp	.+104    	; 0x2da <Kpad_RetVal+0x108>
	else if((ReadCol & (1<<5)) == 0) return R3C3;
 272:	9d 9b       	sbis	0x13, 5	; 19
 274:	34 c0       	rjmp	.+104    	; 0x2de <Kpad_RetVal+0x10c>
	else if((ReadCol & (1<<6)) == 0) return R3C4;
 276:	9e 9b       	sbis	0x13, 6	; 19
 278:	34 c0       	rjmp	.+104    	; 0x2e2 <Kpad_RetVal+0x110>
	
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN4, DIO_PIN_HIGH);
 27a:	88 b3       	in	r24, 0x18	; 24
 27c:	41 e0       	ldi	r20, 0x01	; 1
 27e:	64 e0       	ldi	r22, 0x04	; 4
 280:	0e 94 48 00 	call	0x90	; 0x90 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN5, DIO_PIN_HIGH);
 284:	88 b3       	in	r24, 0x18	; 24
 286:	41 e0       	ldi	r20, 0x01	; 1
 288:	65 e0       	ldi	r22, 0x05	; 5
 28a:	0e 94 48 00 	call	0x90	; 0x90 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN6, DIO_PIN_HIGH);
 28e:	88 b3       	in	r24, 0x18	; 24
 290:	41 e0       	ldi	r20, 0x01	; 1
 292:	66 e0       	ldi	r22, 0x06	; 6
 294:	0e 94 48 00 	call	0x90	; 0x90 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN7, DIO_PIN_LOW);
 298:	88 b3       	in	r24, 0x18	; 24
 29a:	40 e0       	ldi	r20, 0x00	; 0
 29c:	67 e0       	ldi	r22, 0x07	; 7
 29e:	0e 94 48 00 	call	0x90	; 0x90 <DIO_VoidSetPinValue>
	
	if((ReadCol & (1<<3)) == 0) return R4C1;
 2a2:	9b 9b       	sbis	0x13, 3	; 19
 2a4:	20 c0       	rjmp	.+64     	; 0x2e6 <Kpad_RetVal+0x114>
	else if((ReadCol & (1<<4)) == 0) return R4C2;
 2a6:	9c 9b       	sbis	0x13, 4	; 19
 2a8:	20 c0       	rjmp	.+64     	; 0x2ea <Kpad_RetVal+0x118>
	else if((ReadCol & (1<<5)) == 0) return R4C3;
 2aa:	9d 9b       	sbis	0x13, 5	; 19
 2ac:	20 c0       	rjmp	.+64     	; 0x2ee <Kpad_RetVal+0x11c>
	else if((ReadCol & (1<<6)) == 0) return R4C4;
 2ae:	9e 99       	sbic	0x13, 6	; 19
 2b0:	20 c0       	rjmp	.+64     	; 0x2f2 <Kpad_RetVal+0x120>
 2b2:	84 e4       	ldi	r24, 0x44	; 68
 2b4:	08 95       	ret
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN4, DIO_PIN_LOW);
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN5, DIO_PIN_HIGH);
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN6, DIO_PIN_HIGH);
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN7, DIO_PIN_HIGH);
	
	if((ReadCol & (1<<3)) == 0) return R1C1;
 2b6:	81 e3       	ldi	r24, 0x31	; 49
 2b8:	08 95       	ret
	else if((ReadCol & (1<<4)) == 0) return R1C2;
 2ba:	82 e3       	ldi	r24, 0x32	; 50
 2bc:	08 95       	ret
	else if((ReadCol & (1<<5)) == 0) return R1C3;
 2be:	83 e3       	ldi	r24, 0x33	; 51
 2c0:	08 95       	ret
	else if((ReadCol & (1<<6)) == 0) return R1C4;
 2c2:	81 e4       	ldi	r24, 0x41	; 65
 2c4:	08 95       	ret
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN4, DIO_PIN_HIGH);
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN5, DIO_PIN_LOW);
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN6, DIO_PIN_HIGH);
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN7, DIO_PIN_HIGH);
	
	if((ReadCol & (1<<3)) == 0) return R2C1;
 2c6:	84 e3       	ldi	r24, 0x34	; 52
 2c8:	08 95       	ret
	else if((ReadCol & (1<<4)) == 0) return R2C2;
 2ca:	85 e3       	ldi	r24, 0x35	; 53
 2cc:	08 95       	ret
	else if((ReadCol & (1<<5)) == 0) return R2C3;
 2ce:	86 e3       	ldi	r24, 0x36	; 54
 2d0:	08 95       	ret
	else if((ReadCol & (1<<6)) == 0) return R2C4;
 2d2:	82 e4       	ldi	r24, 0x42	; 66
 2d4:	08 95       	ret
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN4, DIO_PIN_HIGH);
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN5, DIO_PIN_HIGH);
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN6, DIO_PIN_LOW);
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN7, DIO_PIN_HIGH);
	
	if((ReadCol & (1<<3)) == 0) return R3C1;
 2d6:	87 e3       	ldi	r24, 0x37	; 55
 2d8:	08 95       	ret
	else if((ReadCol & (1<<4)) == 0) return R3C2;
 2da:	88 e3       	ldi	r24, 0x38	; 56
 2dc:	08 95       	ret
	else if((ReadCol & (1<<5)) == 0) return R3C3;
 2de:	89 e3       	ldi	r24, 0x39	; 57
 2e0:	08 95       	ret
	else if((ReadCol & (1<<6)) == 0) return R3C4;
 2e2:	83 e4       	ldi	r24, 0x43	; 67
 2e4:	08 95       	ret
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN4, DIO_PIN_HIGH);
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN5, DIO_PIN_HIGH);
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN6, DIO_PIN_HIGH);
	DIO_VoidSetPinValue(RawPort, DIO_u8_PIN7, DIO_PIN_LOW);
	
	if((ReadCol & (1<<3)) == 0) return R4C1;
 2e6:	8a e2       	ldi	r24, 0x2A	; 42
 2e8:	08 95       	ret
	else if((ReadCol & (1<<4)) == 0) return R4C2;
 2ea:	80 e3       	ldi	r24, 0x30	; 48
 2ec:	08 95       	ret
	else if((ReadCol & (1<<5)) == 0) return R4C3;
 2ee:	83 e2       	ldi	r24, 0x23	; 35
 2f0:	08 95       	ret
	else if((ReadCol & (1<<6)) == 0) return R4C4;
	
	return Kpad_NULL;
 2f2:	80 e2       	ldi	r24, 0x20	; 32
	
	
 2f4:	08 95       	ret

000002f6 <LCD_SendCommand>:
#include "LCD_cfg.h"
#include "LCD_priv.h"
	
void LCD_SendCommand(unsigned char comm){
	// defining the next inputs as commands (Execute) not data (Data)
	CLEAR_BIT(PORTB, LCD_U8_RS);
 2f6:	98 b3       	in	r25, 0x18	; 24
 2f8:	9d 7f       	andi	r25, 0xFD	; 253
 2fa:	98 bb       	out	0x18, r25	; 24
	// to write only commands
	CLEAR_BIT(PORTB, LCD_U8_RW);
 2fc:	98 b3       	in	r25, 0x18	; 24
 2fe:	9b 7f       	andi	r25, 0xFB	; 251
 300:	98 bb       	out	0x18, r25	; 24
	
	// since we deal with 4 bits, we will send commands like (81)
	// on two parts upper nibble (80)(0101) & (1)(0001)
	// send upper nibble
	PORTA = comm & 0xF0;
 302:	98 2f       	mov	r25, r24
 304:	90 7f       	andi	r25, 0xF0	; 240
 306:	9b bb       	out	0x1b, r25	; 27
	//send 1ms pulse to enable LCD to send the first 4 bits
	SET_BIT(PORTB, LCD_U8_EN);
 308:	98 b3       	in	r25, 0x18	; 24
 30a:	98 60       	ori	r25, 0x08	; 8
 30c:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30e:	ef e9       	ldi	r30, 0x9F	; 159
 310:	ff e0       	ldi	r31, 0x0F	; 15
 312:	31 97       	sbiw	r30, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <LCD_SendCommand+0x1c>
 316:	00 c0       	rjmp	.+0      	; 0x318 <LCD_SendCommand+0x22>
 318:	00 00       	nop

	_delay_ms(1);
	CLEAR_BIT(PORTB, LCD_U8_EN);
 31a:	98 b3       	in	r25, 0x18	; 24
 31c:	97 7f       	andi	r25, 0xF7	; 247
 31e:	98 bb       	out	0x18, r25	; 24
	
	// send lower nibble (1)
	PORTA = comm << 4;
 320:	82 95       	swap	r24
 322:	80 7f       	andi	r24, 0xF0	; 240
 324:	8b bb       	out	0x1b, r24	; 27
	SET_BIT(PORTB, LCD_U8_EN);
 326:	88 b3       	in	r24, 0x18	; 24
 328:	88 60       	ori	r24, 0x08	; 8
 32a:	88 bb       	out	0x18, r24	; 24
 32c:	8f e9       	ldi	r24, 0x9F	; 159
 32e:	9f e0       	ldi	r25, 0x0F	; 15
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <LCD_SendCommand+0x3a>
 334:	00 c0       	rjmp	.+0      	; 0x336 <LCD_SendCommand+0x40>
 336:	00 00       	nop
	_delay_ms(1);
	CLEAR_BIT(PORTB, LCD_U8_EN);
 338:	88 b3       	in	r24, 0x18	; 24
 33a:	87 7f       	andi	r24, 0xF7	; 247
 33c:	88 bb       	out	0x18, r24	; 24
 33e:	08 95       	ret

00000340 <LCD_SendData>:
}

void LCD_SendData(unsigned char data){
	// defining the next inputs as data (Data) not commands (Execute)
	SET_BIT(PORTB, LCD_U8_RS);
 340:	98 b3       	in	r25, 0x18	; 24
 342:	92 60       	ori	r25, 0x02	; 2
 344:	98 bb       	out	0x18, r25	; 24
	// to write only commands
	CLEAR_BIT(PORTB, LCD_U8_RW);
 346:	98 b3       	in	r25, 0x18	; 24
 348:	9b 7f       	andi	r25, 0xFB	; 251
 34a:	98 bb       	out	0x18, r25	; 24
	
	// character a is 41 in asci, it is 8 bit data, so we need to divide by 2
	// send upper nibble
	PORTA = data & 0xF0;
 34c:	98 2f       	mov	r25, r24
 34e:	90 7f       	andi	r25, 0xF0	; 240
 350:	9b bb       	out	0x1b, r25	; 27
	//send 1ms pulse to enable LCD to send the first 4 bits
	SET_BIT(PORTB, LCD_U8_EN);
 352:	98 b3       	in	r25, 0x18	; 24
 354:	98 60       	ori	r25, 0x08	; 8
 356:	98 bb       	out	0x18, r25	; 24
 358:	ef e9       	ldi	r30, 0x9F	; 159
 35a:	ff e0       	ldi	r31, 0x0F	; 15
 35c:	31 97       	sbiw	r30, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <LCD_SendData+0x1c>
 360:	00 c0       	rjmp	.+0      	; 0x362 <LCD_SendData+0x22>
 362:	00 00       	nop
	_delay_ms(1);
	CLEAR_BIT(PORTB, LCD_U8_EN);
 364:	98 b3       	in	r25, 0x18	; 24
 366:	97 7f       	andi	r25, 0xF7	; 247
 368:	98 bb       	out	0x18, r25	; 24
	
	// send lower nibble (1)
	PORTA = data << 4;
 36a:	82 95       	swap	r24
 36c:	80 7f       	andi	r24, 0xF0	; 240
 36e:	8b bb       	out	0x1b, r24	; 27
	SET_BIT(PORTB, LCD_U8_EN);
 370:	88 b3       	in	r24, 0x18	; 24
 372:	88 60       	ori	r24, 0x08	; 8
 374:	88 bb       	out	0x18, r24	; 24
 376:	8f e9       	ldi	r24, 0x9F	; 159
 378:	9f e0       	ldi	r25, 0x0F	; 15
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <LCD_SendData+0x3a>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <LCD_SendData+0x40>
 380:	00 00       	nop
	_delay_ms(1);
	CLEAR_BIT(PORTB, LCD_U8_EN);
 382:	88 b3       	in	r24, 0x18	; 24
 384:	87 7f       	andi	r24, 0xF7	; 247
 386:	88 bb       	out	0x18, r24	; 24
 388:	08 95       	ret

0000038a <LCD_Init>:

	
void LCD_Init(void)
{
	// make sure enable is initialized by zero to be able to send one pulse in the commands or data
	CLEAR_BIT(PORTB, LCD_U8_EN);
 38a:	88 b3       	in	r24, 0x18	; 24
 38c:	87 7f       	andi	r24, 0xF7	; 247
 38e:	88 bb       	out	0x18, r24	; 24
	// next 3 commands will do the 4 bit mode starting
	LCD_SendCommand(33);	
 390:	81 e2       	ldi	r24, 0x21	; 33
 392:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_SendCommand>
	LCD_SendCommand(32);
 396:	80 e2       	ldi	r24, 0x20	; 32
 398:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_SendCommand>
	LCD_SendCommand(28);	// configurations, check the readme
 39c:	8c e1       	ldi	r24, 0x1C	; 28
 39e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_SendCommand>
	LCD_SendCommand(0x0e);	// display on.cursor on
 3a2:	8e e0       	ldi	r24, 0x0E	; 14
 3a4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_SendCommand>
	LCD_SendCommand(0x01);	// Clear LCD
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_SendCommand>
 3ae:	8f e3       	ldi	r24, 0x3F	; 63
 3b0:	9f e1       	ldi	r25, 0x1F	; 31
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <LCD_Init+0x28>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <LCD_Init+0x2e>
 3b8:	00 00       	nop
 3ba:	08 95       	ret

000003bc <LCD_PrintString>:
	_delay_ms(2);
}

void LCD_PrintString(char* Str_Print){
 3bc:	0f 93       	push	r16
 3be:	1f 93       	push	r17
 3c0:	cf 93       	push	r28
 3c2:	8c 01       	movw	r16, r24
	unsigned char i = 0;
 3c4:	c0 e0       	ldi	r28, 0x00	; 0
	while(Str_Print[i] != 0){ //null character
 3c6:	03 c0       	rjmp	.+6      	; 0x3ce <LCD_PrintString+0x12>
		LCD_SendData(Str_Print[i]);
 3c8:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_SendData>
		i++;
 3cc:	cf 5f       	subi	r28, 0xFF	; 255
	_delay_ms(2);
}

void LCD_PrintString(char* Str_Print){
	unsigned char i = 0;
	while(Str_Print[i] != 0){ //null character
 3ce:	f8 01       	movw	r30, r16
 3d0:	ec 0f       	add	r30, r28
 3d2:	f1 1d       	adc	r31, r1
 3d4:	80 81       	ld	r24, Z
 3d6:	81 11       	cpse	r24, r1
 3d8:	f7 cf       	rjmp	.-18     	; 0x3c8 <LCD_PrintString+0xc>
		LCD_SendData(Str_Print[i]);
		i++;
	}
}
 3da:	cf 91       	pop	r28
 3dc:	1f 91       	pop	r17
 3de:	0f 91       	pop	r16
 3e0:	08 95       	ret

000003e2 <main>:

int main(void)
{
	u8 button, op1, op2;
	u16 result;
	DIO_VoidInit();
 3e2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VoidInit>
	LCD_Init();
 3e6:	0e 94 c5 01 	call	0x38a	; 0x38a <LCD_Init>
	KeyPad_Init();
 3ea:	0e 94 c0 00 	call	0x180	; 0x180 <KeyPad_Init>
	while (1)
	{
		RawPort &= ReadRawVal;
 3ee:	88 b3       	in	r24, 0x18	; 24
 3f0:	8f 70       	andi	r24, 0x0F	; 15
 3f2:	88 bb       	out	0x18, r24	; 24
		ColumnPort |= ReadColVal;
 3f4:	85 b3       	in	r24, 0x15	; 21
 3f6:	88 67       	ori	r24, 0x78	; 120
 3f8:	85 bb       	out	0x15, r24	; 21
		if(ReadCol != ReadColVal){ // button is pressed but which one
 3fa:	83 b3       	in	r24, 0x13	; 19
 3fc:	88 37       	cpi	r24, 0x78	; 120
 3fe:	b9 f3       	breq	.-18     	; 0x3ee <main+0xc>
			button = Kpad_RetVal(); // return button asci code
 400:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <Kpad_RetVal>
			switch (button){
 404:	83 33       	cpi	r24, 0x33	; 51
 406:	39 f1       	breq	.+78     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 408:	28 f4       	brcc	.+10     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 40a:	81 33       	cpi	r24, 0x31	; 49
 40c:	41 f0       	breq	.+16     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 40e:	82 33       	cpi	r24, 0x32	; 50
 410:	a1 f0       	breq	.+40     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 412:	ed cf       	rjmp	.-38     	; 0x3ee <main+0xc>
 414:	84 33       	cpi	r24, 0x34	; 52
 416:	69 f1       	breq	.+90     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 418:	85 33       	cpi	r24, 0x35	; 53
 41a:	c9 f1       	breq	.+114    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 41c:	e8 cf       	rjmp	.-48     	; 0x3ee <main+0xc>
			case'1':	LCD_PrintString("1"); _delay_ms(300); break;
 41e:	80 e6       	ldi	r24, 0x60	; 96
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_PrintString>
 426:	2f ef       	ldi	r18, 0xFF	; 255
 428:	85 ea       	ldi	r24, 0xA5	; 165
 42a:	9e e0       	ldi	r25, 0x0E	; 14
 42c:	21 50       	subi	r18, 0x01	; 1
 42e:	80 40       	sbci	r24, 0x00	; 0
 430:	90 40       	sbci	r25, 0x00	; 0
 432:	e1 f7       	brne	.-8      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 434:	00 c0       	rjmp	.+0      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 436:	00 00       	nop
 438:	da cf       	rjmp	.-76     	; 0x3ee <main+0xc>
			case'2':	LCD_PrintString("2"); _delay_ms(300); break;
 43a:	82 e6       	ldi	r24, 0x62	; 98
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_PrintString>
 442:	2f ef       	ldi	r18, 0xFF	; 255
 444:	85 ea       	ldi	r24, 0xA5	; 165
 446:	9e e0       	ldi	r25, 0x0E	; 14
 448:	21 50       	subi	r18, 0x01	; 1
 44a:	80 40       	sbci	r24, 0x00	; 0
 44c:	90 40       	sbci	r25, 0x00	; 0
 44e:	e1 f7       	brne	.-8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 450:	00 c0       	rjmp	.+0      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 452:	00 00       	nop
 454:	cc cf       	rjmp	.-104    	; 0x3ee <main+0xc>
			case'3':	LCD_PrintString("3"); _delay_ms(300); break;
 456:	84 e6       	ldi	r24, 0x64	; 100
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_PrintString>
 45e:	2f ef       	ldi	r18, 0xFF	; 255
 460:	85 ea       	ldi	r24, 0xA5	; 165
 462:	9e e0       	ldi	r25, 0x0E	; 14
 464:	21 50       	subi	r18, 0x01	; 1
 466:	80 40       	sbci	r24, 0x00	; 0
 468:	90 40       	sbci	r25, 0x00	; 0
 46a:	e1 f7       	brne	.-8      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 46e:	00 00       	nop
 470:	be cf       	rjmp	.-132    	; 0x3ee <main+0xc>
			case'4':	LCD_PrintString("4"); _delay_ms(300); break;
 472:	86 e6       	ldi	r24, 0x66	; 102
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_PrintString>
 47a:	2f ef       	ldi	r18, 0xFF	; 255
 47c:	85 ea       	ldi	r24, 0xA5	; 165
 47e:	9e e0       	ldi	r25, 0x0E	; 14
 480:	21 50       	subi	r18, 0x01	; 1
 482:	80 40       	sbci	r24, 0x00	; 0
 484:	90 40       	sbci	r25, 0x00	; 0
 486:	e1 f7       	brne	.-8      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 488:	00 c0       	rjmp	.+0      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 48a:	00 00       	nop
 48c:	b0 cf       	rjmp	.-160    	; 0x3ee <main+0xc>
			case'5':	LCD_PrintString("5"); _delay_ms(300); break;
 48e:	88 e6       	ldi	r24, 0x68	; 104
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_PrintString>
 496:	2f ef       	ldi	r18, 0xFF	; 255
 498:	85 ea       	ldi	r24, 0xA5	; 165
 49a:	9e e0       	ldi	r25, 0x0E	; 14
 49c:	21 50       	subi	r18, 0x01	; 1
 49e:	80 40       	sbci	r24, 0x00	; 0
 4a0:	90 40       	sbci	r25, 0x00	; 0
 4a2:	e1 f7       	brne	.-8      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 4a6:	00 00       	nop
 4a8:	a2 cf       	rjmp	.-188    	; 0x3ee <main+0xc>

000004aa <_exit>:
 4aa:	f8 94       	cli

000004ac <__stop_program>:
 4ac:	ff cf       	rjmp	.-2      	; 0x4ac <__stop_program>
