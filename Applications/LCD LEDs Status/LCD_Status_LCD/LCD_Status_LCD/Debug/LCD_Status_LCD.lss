
LCD_Status_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000378  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000378  000003ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bc4  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ab  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000621  00000000  00000000  0000185f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001e80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042b  00000000  00000000  00001f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000416  00000000  00000000  00002377  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  0000278d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 74 01 	call	0x2e8	; 0x2e8 <main>
  7a:	0c 94 ba 01 	jmp	0x374	; 0x374 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_VoidInit>:
#include "DIO_priv.h"
#include "stdbool.h"


void DIO_VoidInit(void){
	DDRA = DIO_u8_PORTA_DIR;
  82:	80 ef       	ldi	r24, 0xF0	; 240
  84:	8a bb       	out	0x1a, r24	; 26
	DDRB = DIO_u8_PORTB_DIR;
  86:	8e e0       	ldi	r24, 0x0E	; 14
  88:	87 bb       	out	0x17, r24	; 23
	DDRC = DIO_u8_PORTC_DIR;
  8a:	84 e8       	ldi	r24, 0x84	; 132
  8c:	84 bb       	out	0x14, r24	; 20
	DDRD = DIO_u8_PORTD_DIR;
  8e:	11 ba       	out	0x11, r1	; 17
  90:	08 95       	ret

00000092 <DIO_VoidSetPinValue>:
}

void DIO_VoidSetPinValue(u8 DIO_u8Port , u8 DIO_u8Pin , u8 DIO_u8Val){
	switch(DIO_u8Port)
  92:	86 30       	cpi	r24, 0x06	; 6
  94:	29 f1       	breq	.+74     	; 0xe0 <DIO_VoidSetPinValue+0x4e>
  96:	18 f4       	brcc	.+6      	; 0x9e <DIO_VoidSetPinValue+0xc>
  98:	85 30       	cpi	r24, 0x05	; 5
  9a:	39 f0       	breq	.+14     	; 0xaa <DIO_VoidSetPinValue+0x18>
  9c:	08 95       	ret
  9e:	87 30       	cpi	r24, 0x07	; 7
  a0:	d1 f1       	breq	.+116    	; 0x116 <DIO_VoidSetPinValue+0x84>
  a2:	88 30       	cpi	r24, 0x08	; 8
  a4:	09 f4       	brne	.+2      	; 0xa8 <DIO_VoidSetPinValue+0x16>
  a6:	52 c0       	rjmp	.+164    	; 0x14c <DIO_VoidSetPinValue+0xba>
  a8:	08 95       	ret
	{
		case DIO_u8_PORTA:
			if(DIO_u8Val == DIO_PIN_HIGH)
  aa:	41 30       	cpi	r20, 0x01	; 1
  ac:	59 f4       	brne	.+22     	; 0xc4 <DIO_VoidSetPinValue+0x32>
				SET_BIT(PORTA, DIO_u8Pin);
  ae:	2b b3       	in	r18, 0x1b	; 27
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_VoidSetPinValue+0x28>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_VoidSetPinValue+0x24>
  be:	82 2b       	or	r24, r18
  c0:	8b bb       	out	0x1b, r24	; 27
  c2:	08 95       	ret
			else if(DIO_u8Val == DIO_PIN_LOW)
  c4:	41 11       	cpse	r20, r1
  c6:	5c c0       	rjmp	.+184    	; 0x180 <DIO_VoidSetPinValue+0xee>
				CLEAR_BIT(PORTA, DIO_u8Pin);
  c8:	2b b3       	in	r18, 0x1b	; 27
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_VoidSetPinValue+0x42>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_VoidSetPinValue+0x3e>
  d8:	80 95       	com	r24
  da:	82 23       	and	r24, r18
  dc:	8b bb       	out	0x1b, r24	; 27
  de:	08 95       	ret
			break;
		case DIO_u8_PORTB:
			if(DIO_u8Val == DIO_PIN_HIGH)
  e0:	41 30       	cpi	r20, 0x01	; 1
  e2:	59 f4       	brne	.+22     	; 0xfa <DIO_VoidSetPinValue+0x68>
				SET_BIT(PORTB, DIO_u8Pin);
  e4:	28 b3       	in	r18, 0x18	; 24
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_VoidSetPinValue+0x5e>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_VoidSetPinValue+0x5a>
  f4:	82 2b       	or	r24, r18
  f6:	88 bb       	out	0x18, r24	; 24
  f8:	08 95       	ret
			else if(DIO_u8Val == DIO_PIN_LOW)
  fa:	41 11       	cpse	r20, r1
  fc:	41 c0       	rjmp	.+130    	; 0x180 <DIO_VoidSetPinValue+0xee>
				CLEAR_BIT(PORTB, DIO_u8Pin);
  fe:	28 b3       	in	r18, 0x18	; 24
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_VoidSetPinValue+0x78>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_VoidSetPinValue+0x74>
 10e:	80 95       	com	r24
 110:	82 23       	and	r24, r18
 112:	88 bb       	out	0x18, r24	; 24
 114:	08 95       	ret
			break;
		case DIO_u8_PORTC:
			if(DIO_u8Val == DIO_PIN_HIGH)
 116:	41 30       	cpi	r20, 0x01	; 1
 118:	59 f4       	brne	.+22     	; 0x130 <DIO_VoidSetPinValue+0x9e>
				SET_BIT(PORTC, DIO_u8Pin);
 11a:	25 b3       	in	r18, 0x15	; 21
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_VoidSetPinValue+0x94>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_VoidSetPinValue+0x90>
 12a:	82 2b       	or	r24, r18
 12c:	85 bb       	out	0x15, r24	; 21
 12e:	08 95       	ret
			else if(DIO_u8Val == DIO_PIN_LOW)
 130:	41 11       	cpse	r20, r1
 132:	26 c0       	rjmp	.+76     	; 0x180 <DIO_VoidSetPinValue+0xee>
				CLEAR_BIT(PORTC, DIO_u8Pin);
 134:	25 b3       	in	r18, 0x15	; 21
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_VoidSetPinValue+0xae>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_VoidSetPinValue+0xaa>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	85 bb       	out	0x15, r24	; 21
 14a:	08 95       	ret
			break;
		case DIO_u8_PORTD:
			if(DIO_u8Val == DIO_PIN_HIGH)
 14c:	41 30       	cpi	r20, 0x01	; 1
 14e:	59 f4       	brne	.+22     	; 0x166 <DIO_VoidSetPinValue+0xd4>
				SET_BIT(PORTD, DIO_u8Pin);
 150:	22 b3       	in	r18, 0x12	; 18
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_VoidSetPinValue+0xca>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_VoidSetPinValue+0xc6>
 160:	82 2b       	or	r24, r18
 162:	82 bb       	out	0x12, r24	; 18
 164:	08 95       	ret
			else if(DIO_u8Val == DIO_PIN_LOW)
 166:	41 11       	cpse	r20, r1
 168:	0b c0       	rjmp	.+22     	; 0x180 <DIO_VoidSetPinValue+0xee>
				CLEAR_BIT(PORTD, DIO_u8Pin);
 16a:	22 b3       	in	r18, 0x12	; 18
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_VoidSetPinValue+0xe4>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_VoidSetPinValue+0xe0>
 17a:	80 95       	com	r24
 17c:	82 23       	and	r24, r18
 17e:	82 bb       	out	0x12, r24	; 18
 180:	08 95       	ret

00000182 <DIO_u8GetPinValue>:
			return;	
	}
}

bool DIO_u8GetPinValue(u8 DIO_u8Port , u8 DIO_u8Pin){
	switch(DIO_u8Port)
 182:	86 30       	cpi	r24, 0x06	; 6
 184:	a9 f0       	breq	.+42     	; 0x1b0 <DIO_u8GetPinValue+0x2e>
 186:	18 f4       	brcc	.+6      	; 0x18e <DIO_u8GetPinValue+0xc>
 188:	85 30       	cpi	r24, 0x05	; 5
 18a:	31 f0       	breq	.+12     	; 0x198 <DIO_u8GetPinValue+0x16>
 18c:	35 c0       	rjmp	.+106    	; 0x1f8 <DIO_u8GetPinValue+0x76>
 18e:	87 30       	cpi	r24, 0x07	; 7
 190:	d9 f0       	breq	.+54     	; 0x1c8 <DIO_u8GetPinValue+0x46>
 192:	88 30       	cpi	r24, 0x08	; 8
 194:	29 f1       	breq	.+74     	; 0x1e0 <DIO_u8GetPinValue+0x5e>
 196:	30 c0       	rjmp	.+96     	; 0x1f8 <DIO_u8GetPinValue+0x76>
	{
		case DIO_u8_PORTA:
			return GET_BIT(PINA, DIO_u8Pin);
 198:	29 b3       	in	r18, 0x19	; 25
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_u8GetPinValue+0x20>
 19e:	35 95       	asr	r19
 1a0:	27 95       	ror	r18
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_u8GetPinValue+0x1c>
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	20 fd       	sbrc	r18, 0
 1aa:	27 c0       	rjmp	.+78     	; 0x1fa <DIO_u8GetPinValue+0x78>
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	08 95       	ret
			break;
		case DIO_u8_PORTB:
			return GET_BIT(PINB, DIO_u8Pin);
 1b0:	26 b3       	in	r18, 0x16	; 22
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_u8GetPinValue+0x38>
 1b6:	35 95       	asr	r19
 1b8:	27 95       	ror	r18
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_u8GetPinValue+0x34>
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	20 fd       	sbrc	r18, 0
 1c2:	1b c0       	rjmp	.+54     	; 0x1fa <DIO_u8GetPinValue+0x78>
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	08 95       	ret
			break;
		case DIO_u8_PORTC:
			return GET_BIT(PINC, DIO_u8Pin);
 1c8:	23 b3       	in	r18, 0x13	; 19
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_u8GetPinValue+0x50>
 1ce:	35 95       	asr	r19
 1d0:	27 95       	ror	r18
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_u8GetPinValue+0x4c>
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	20 fd       	sbrc	r18, 0
 1da:	0f c0       	rjmp	.+30     	; 0x1fa <DIO_u8GetPinValue+0x78>
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	08 95       	ret
			break;
		case DIO_u8_PORTD:
			return GET_BIT(PIND, DIO_u8Pin);
 1e0:	20 b3       	in	r18, 0x10	; 16
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_u8GetPinValue+0x68>
 1e6:	35 95       	asr	r19
 1e8:	27 95       	ror	r18
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_u8GetPinValue+0x64>
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	20 fd       	sbrc	r18, 0
 1f2:	03 c0       	rjmp	.+6      	; 0x1fa <DIO_u8GetPinValue+0x78>
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	08 95       	ret
			break;
		default:
			return 0;
 1f8:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 1fa:	08 95       	ret

000001fc <LCD_SendCommand>:
#include "LCD_cfg.h"
#include "LCD_priv.h"
	
void LCD_SendCommand(unsigned char comm){
	// defining the next inputs as commands (Execute) not data (Data)
	CLEAR_BIT(PORTB, LCD_U8_RS);
 1fc:	98 b3       	in	r25, 0x18	; 24
 1fe:	9d 7f       	andi	r25, 0xFD	; 253
 200:	98 bb       	out	0x18, r25	; 24
	// to write only commands
	CLEAR_BIT(PORTB, LCD_U8_RW);
 202:	98 b3       	in	r25, 0x18	; 24
 204:	9b 7f       	andi	r25, 0xFB	; 251
 206:	98 bb       	out	0x18, r25	; 24
	
	// since we deal with 4 bits, we will send commands like (81)
	// on two parts upper nibble (80)(0101) & (1)(0001)
	// send upper nibble
	PORTA = comm & 0xF0;
 208:	98 2f       	mov	r25, r24
 20a:	90 7f       	andi	r25, 0xF0	; 240
 20c:	9b bb       	out	0x1b, r25	; 27
	//send 1ms pulse to enable LCD to send the first 4 bits
	SET_BIT(PORTB, LCD_U8_EN);
 20e:	98 b3       	in	r25, 0x18	; 24
 210:	98 60       	ori	r25, 0x08	; 8
 212:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 214:	ef e9       	ldi	r30, 0x9F	; 159
 216:	ff e0       	ldi	r31, 0x0F	; 15
 218:	31 97       	sbiw	r30, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <LCD_SendCommand+0x1c>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <LCD_SendCommand+0x22>
 21e:	00 00       	nop

	_delay_ms(1);
	CLEAR_BIT(PORTB, LCD_U8_EN);
 220:	98 b3       	in	r25, 0x18	; 24
 222:	97 7f       	andi	r25, 0xF7	; 247
 224:	98 bb       	out	0x18, r25	; 24
	
	// send lower nibble (1)
	PORTA = comm << 4;
 226:	82 95       	swap	r24
 228:	80 7f       	andi	r24, 0xF0	; 240
 22a:	8b bb       	out	0x1b, r24	; 27
	SET_BIT(PORTB, LCD_U8_EN);
 22c:	88 b3       	in	r24, 0x18	; 24
 22e:	88 60       	ori	r24, 0x08	; 8
 230:	88 bb       	out	0x18, r24	; 24
 232:	8f e9       	ldi	r24, 0x9F	; 159
 234:	9f e0       	ldi	r25, 0x0F	; 15
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <LCD_SendCommand+0x3a>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <LCD_SendCommand+0x40>
 23c:	00 00       	nop
	_delay_ms(1);
	CLEAR_BIT(PORTB, LCD_U8_EN);
 23e:	88 b3       	in	r24, 0x18	; 24
 240:	87 7f       	andi	r24, 0xF7	; 247
 242:	88 bb       	out	0x18, r24	; 24
 244:	08 95       	ret

00000246 <LCD_SendData>:
}

void LCD_SendData(unsigned char data){
	// defining the next inputs as data (Data) not commands (Execute)
	SET_BIT(PORTB, LCD_U8_RS);
 246:	98 b3       	in	r25, 0x18	; 24
 248:	92 60       	ori	r25, 0x02	; 2
 24a:	98 bb       	out	0x18, r25	; 24
	// to write only commands
	CLEAR_BIT(PORTB, LCD_U8_RW);
 24c:	98 b3       	in	r25, 0x18	; 24
 24e:	9b 7f       	andi	r25, 0xFB	; 251
 250:	98 bb       	out	0x18, r25	; 24
	
	// character a is 41 in asci, it is 8 bit data, so we need to divide by 2
	// send upper nibble
	PORTA = data & 0xF0;
 252:	98 2f       	mov	r25, r24
 254:	90 7f       	andi	r25, 0xF0	; 240
 256:	9b bb       	out	0x1b, r25	; 27
	//send 1ms pulse to enable LCD to send the first 4 bits
	SET_BIT(PORTB, LCD_U8_EN);
 258:	98 b3       	in	r25, 0x18	; 24
 25a:	98 60       	ori	r25, 0x08	; 8
 25c:	98 bb       	out	0x18, r25	; 24
 25e:	ef e9       	ldi	r30, 0x9F	; 159
 260:	ff e0       	ldi	r31, 0x0F	; 15
 262:	31 97       	sbiw	r30, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <LCD_SendData+0x1c>
 266:	00 c0       	rjmp	.+0      	; 0x268 <LCD_SendData+0x22>
 268:	00 00       	nop
	_delay_ms(1);
	CLEAR_BIT(PORTB, LCD_U8_EN);
 26a:	98 b3       	in	r25, 0x18	; 24
 26c:	97 7f       	andi	r25, 0xF7	; 247
 26e:	98 bb       	out	0x18, r25	; 24
	
	// send lower nibble (1)
	PORTA = data << 4;
 270:	82 95       	swap	r24
 272:	80 7f       	andi	r24, 0xF0	; 240
 274:	8b bb       	out	0x1b, r24	; 27
	SET_BIT(PORTB, LCD_U8_EN);
 276:	88 b3       	in	r24, 0x18	; 24
 278:	88 60       	ori	r24, 0x08	; 8
 27a:	88 bb       	out	0x18, r24	; 24
 27c:	8f e9       	ldi	r24, 0x9F	; 159
 27e:	9f e0       	ldi	r25, 0x0F	; 15
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <LCD_SendData+0x3a>
 284:	00 c0       	rjmp	.+0      	; 0x286 <LCD_SendData+0x40>
 286:	00 00       	nop
	_delay_ms(1);
	CLEAR_BIT(PORTB, LCD_U8_EN);
 288:	88 b3       	in	r24, 0x18	; 24
 28a:	87 7f       	andi	r24, 0xF7	; 247
 28c:	88 bb       	out	0x18, r24	; 24
 28e:	08 95       	ret

00000290 <LCD_Init>:

	
void LCD_Init(void)
{
	// make sure enable is initialized by zero to be able to send one pulse in the commands or data
	CLEAR_BIT(PORTB, LCD_U8_EN);
 290:	88 b3       	in	r24, 0x18	; 24
 292:	87 7f       	andi	r24, 0xF7	; 247
 294:	88 bb       	out	0x18, r24	; 24
	// next 3 commands will do the 4 bit mode starting
	LCD_SendCommand(33);	
 296:	81 e2       	ldi	r24, 0x21	; 33
 298:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCD_SendCommand>
	LCD_SendCommand(32);
 29c:	80 e2       	ldi	r24, 0x20	; 32
 29e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCD_SendCommand>
	LCD_SendCommand(28);	// configurations, check the readme
 2a2:	8c e1       	ldi	r24, 0x1C	; 28
 2a4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCD_SendCommand>
	LCD_SendCommand(0x0e);	// display on.cursor on
 2a8:	8e e0       	ldi	r24, 0x0E	; 14
 2aa:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCD_SendCommand>
	LCD_SendCommand(0x01);	// Clear LCD
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCD_SendCommand>
 2b4:	8f e3       	ldi	r24, 0x3F	; 63
 2b6:	9f e1       	ldi	r25, 0x1F	; 31
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <LCD_Init+0x28>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <LCD_Init+0x2e>
 2be:	00 00       	nop
 2c0:	08 95       	ret

000002c2 <LCD_PrintString>:
	_delay_ms(2);
}

void LCD_PrintString(char* Str_Print){
 2c2:	0f 93       	push	r16
 2c4:	1f 93       	push	r17
 2c6:	cf 93       	push	r28
 2c8:	8c 01       	movw	r16, r24
	unsigned char i = 0;
 2ca:	c0 e0       	ldi	r28, 0x00	; 0
	while(Str_Print[i] != 0){ //null character
 2cc:	03 c0       	rjmp	.+6      	; 0x2d4 <LCD_PrintString+0x12>
		LCD_SendData(Str_Print[i]);
 2ce:	0e 94 23 01 	call	0x246	; 0x246 <LCD_SendData>
		i++;
 2d2:	cf 5f       	subi	r28, 0xFF	; 255
	_delay_ms(2);
}

void LCD_PrintString(char* Str_Print){
	unsigned char i = 0;
	while(Str_Print[i] != 0){ //null character
 2d4:	f8 01       	movw	r30, r16
 2d6:	ec 0f       	add	r30, r28
 2d8:	f1 1d       	adc	r31, r1
 2da:	80 81       	ld	r24, Z
 2dc:	81 11       	cpse	r24, r1
 2de:	f7 cf       	rjmp	.-18     	; 0x2ce <LCD_PrintString+0xc>
		LCD_SendData(Str_Print[i]);
		i++;
	}
}
 2e0:	cf 91       	pop	r28
 2e2:	1f 91       	pop	r17
 2e4:	0f 91       	pop	r16
 2e6:	08 95       	ret

000002e8 <main>:
#include "DIO_int.h"
#include "LCD_int.h"

int main(void)
{	
    DIO_VoidInit();
 2e8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VoidInit>
	LCD_Init();
 2ec:	0e 94 48 01 	call	0x290	; 0x290 <LCD_Init>
	
    while (1) 
    {
		DIO_VoidSetPinValue(DIO_u8_PORTC, DIO_u8_PIN2, DIO_PIN_HIGH);
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	62 e0       	ldi	r22, 0x02	; 2
 2f4:	87 e0       	ldi	r24, 0x07	; 7
 2f6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidSetPinValue>
		if(DIO_u8GetPinValue(DIO_u8_PORTC, DIO_u8_PIN2) == true){
 2fa:	62 e0       	ldi	r22, 0x02	; 2
 2fc:	87 e0       	ldi	r24, 0x07	; 7
 2fe:	0e 94 c1 00 	call	0x182	; 0x182 <DIO_u8GetPinValue>
 302:	88 23       	and	r24, r24
 304:	a9 f3       	breq	.-22     	; 0x2f0 <main+0x8>
			LCD_SendCommand(0x01);
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCD_SendCommand>
 30c:	8f e1       	ldi	r24, 0x1F	; 31
 30e:	9e e4       	ldi	r25, 0x4E	; 78
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <main+0x28>
 314:	00 c0       	rjmp	.+0      	; 0x316 <main+0x2e>
 316:	00 00       	nop
			_delay_ms(5);
			if(DIO_u8GetPinValue(DIO_u8_PORTC, DIO_u8_PIN7) == true){
 318:	67 e0       	ldi	r22, 0x07	; 7
 31a:	87 e0       	ldi	r24, 0x07	; 7
 31c:	0e 94 c1 00 	call	0x182	; 0x182 <DIO_u8GetPinValue>
 320:	88 23       	and	r24, r24
 322:	89 f0       	breq	.+34     	; 0x346 <main+0x5e>
				LCD_PrintString("LED off");
 324:	80 e6       	ldi	r24, 0x60	; 96
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_PrintString>
				CLEAR_BIT(PORTC, 7);
 32c:	85 b3       	in	r24, 0x15	; 21
 32e:	8f 77       	andi	r24, 0x7F	; 127
 330:	85 bb       	out	0x15, r24	; 21
 332:	9f ef       	ldi	r25, 0xFF	; 255
 334:	2b e7       	ldi	r18, 0x7B	; 123
 336:	82 e9       	ldi	r24, 0x92	; 146
 338:	91 50       	subi	r25, 0x01	; 1
 33a:	20 40       	sbci	r18, 0x00	; 0
 33c:	80 40       	sbci	r24, 0x00	; 0
 33e:	e1 f7       	brne	.-8      	; 0x338 <main+0x50>
 340:	00 c0       	rjmp	.+0      	; 0x342 <main+0x5a>
 342:	00 00       	nop
 344:	d5 cf       	rjmp	.-86     	; 0x2f0 <main+0x8>
				_delay_ms(3000);
			}
			else if(DIO_u8GetPinValue(DIO_u8_PORTC, DIO_u8_PIN7) == false){
 346:	67 e0       	ldi	r22, 0x07	; 7
 348:	87 e0       	ldi	r24, 0x07	; 7
 34a:	0e 94 c1 00 	call	0x182	; 0x182 <DIO_u8GetPinValue>
 34e:	81 11       	cpse	r24, r1
 350:	cf cf       	rjmp	.-98     	; 0x2f0 <main+0x8>
				LCD_PrintString("LED on");
 352:	88 e6       	ldi	r24, 0x68	; 104
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_PrintString>
				SET_BIT(PORTC, 7);
 35a:	85 b3       	in	r24, 0x15	; 21
 35c:	80 68       	ori	r24, 0x80	; 128
 35e:	85 bb       	out	0x15, r24	; 21
 360:	9f ef       	ldi	r25, 0xFF	; 255
 362:	2b e7       	ldi	r18, 0x7B	; 123
 364:	82 e9       	ldi	r24, 0x92	; 146
 366:	91 50       	subi	r25, 0x01	; 1
 368:	20 40       	sbci	r18, 0x00	; 0
 36a:	80 40       	sbci	r24, 0x00	; 0
 36c:	e1 f7       	brne	.-8      	; 0x366 <main+0x7e>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <main+0x88>
 370:	00 00       	nop
 372:	be cf       	rjmp	.-132    	; 0x2f0 <main+0x8>

00000374 <_exit>:
 374:	f8 94       	cli

00000376 <__stop_program>:
 376:	ff cf       	rjmp	.-2      	; 0x376 <__stop_program>
