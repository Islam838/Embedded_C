
DIO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000026e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ac  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065f  00000000  00000000  00000ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003bb  00000000  00000000  00001137  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  000014f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b8  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000155  00000000  00000000  00001914  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001a69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <main>
  64:	0c 94 0b 01 	jmp	0x216	; 0x216 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_VoidInit>:
#include "DIO_priv.h"
#include "stdbool.h"


void DIO_VoidInit(void){
	DDRA = DIO_u8_PORTA_DIR;
  6c:	1a ba       	out	0x1a, r1	; 26
	DDRB = DIO_u8_PORTB_DIR;
  6e:	17 ba       	out	0x17, r1	; 23
	DDRC = DIO_u8_PORTC_DIR;
  70:	84 e8       	ldi	r24, 0x84	; 132
  72:	84 bb       	out	0x14, r24	; 20
	DDRD = DIO_u8_PORTD_DIR;
  74:	11 ba       	out	0x11, r1	; 17
  76:	08 95       	ret

00000078 <DIO_VoidSetPinValue>:
}

void DIO_VoidSetPinValue(u8 DIO_u8Port , u8 DIO_u8Pin , u8 DIO_u8Val){
	switch(DIO_u8Port)
  78:	86 30       	cpi	r24, 0x06	; 6
  7a:	29 f1       	breq	.+74     	; 0xc6 <DIO_VoidSetPinValue+0x4e>
  7c:	18 f4       	brcc	.+6      	; 0x84 <DIO_VoidSetPinValue+0xc>
  7e:	85 30       	cpi	r24, 0x05	; 5
  80:	39 f0       	breq	.+14     	; 0x90 <DIO_VoidSetPinValue+0x18>
  82:	08 95       	ret
  84:	87 30       	cpi	r24, 0x07	; 7
  86:	d1 f1       	breq	.+116    	; 0xfc <DIO_VoidSetPinValue+0x84>
  88:	88 30       	cpi	r24, 0x08	; 8
  8a:	09 f4       	brne	.+2      	; 0x8e <DIO_VoidSetPinValue+0x16>
  8c:	52 c0       	rjmp	.+164    	; 0x132 <DIO_VoidSetPinValue+0xba>
  8e:	08 95       	ret
	{
		case DIO_u8_PORTA:
			if(DIO_u8Val == DIO_PIN_HIGH)
  90:	41 30       	cpi	r20, 0x01	; 1
  92:	59 f4       	brne	.+22     	; 0xaa <DIO_VoidSetPinValue+0x32>
				SET_BIT(PORTA, DIO_u8Pin);
  94:	2b b3       	in	r18, 0x1b	; 27
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <DIO_VoidSetPinValue+0x28>
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	6a 95       	dec	r22
  a2:	e2 f7       	brpl	.-8      	; 0x9c <DIO_VoidSetPinValue+0x24>
  a4:	82 2b       	or	r24, r18
  a6:	8b bb       	out	0x1b, r24	; 27
  a8:	08 95       	ret
			else if(DIO_u8Val == DIO_PIN_LOW)
  aa:	41 11       	cpse	r20, r1
  ac:	5c c0       	rjmp	.+184    	; 0x166 <DIO_VoidSetPinValue+0xee>
				CLEAR_BIT(PORTA, DIO_u8Pin);
  ae:	2b b3       	in	r18, 0x1b	; 27
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_VoidSetPinValue+0x42>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_VoidSetPinValue+0x3e>
  be:	80 95       	com	r24
  c0:	82 23       	and	r24, r18
  c2:	8b bb       	out	0x1b, r24	; 27
  c4:	08 95       	ret
			break;
		case DIO_u8_PORTB:
			if(DIO_u8Val == DIO_PIN_HIGH)
  c6:	41 30       	cpi	r20, 0x01	; 1
  c8:	59 f4       	brne	.+22     	; 0xe0 <DIO_VoidSetPinValue+0x68>
				SET_BIT(PORTB, DIO_u8Pin);
  ca:	28 b3       	in	r18, 0x18	; 24
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <DIO_VoidSetPinValue+0x5e>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <DIO_VoidSetPinValue+0x5a>
  da:	82 2b       	or	r24, r18
  dc:	88 bb       	out	0x18, r24	; 24
  de:	08 95       	ret
			else if(DIO_u8Val == DIO_PIN_LOW)
  e0:	41 11       	cpse	r20, r1
  e2:	41 c0       	rjmp	.+130    	; 0x166 <DIO_VoidSetPinValue+0xee>
				CLEAR_BIT(PORTB, DIO_u8Pin);
  e4:	28 b3       	in	r18, 0x18	; 24
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_VoidSetPinValue+0x78>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_VoidSetPinValue+0x74>
  f4:	80 95       	com	r24
  f6:	82 23       	and	r24, r18
  f8:	88 bb       	out	0x18, r24	; 24
  fa:	08 95       	ret
			break;
		case DIO_u8_PORTC:
			if(DIO_u8Val == DIO_PIN_HIGH)
  fc:	41 30       	cpi	r20, 0x01	; 1
  fe:	59 f4       	brne	.+22     	; 0x116 <DIO_VoidSetPinValue+0x9e>
				SET_BIT(PORTC, DIO_u8Pin);
 100:	25 b3       	in	r18, 0x15	; 21
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <DIO_VoidSetPinValue+0x94>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	6a 95       	dec	r22
 10e:	e2 f7       	brpl	.-8      	; 0x108 <DIO_VoidSetPinValue+0x90>
 110:	82 2b       	or	r24, r18
 112:	85 bb       	out	0x15, r24	; 21
 114:	08 95       	ret
			else if(DIO_u8Val == DIO_PIN_LOW)
 116:	41 11       	cpse	r20, r1
 118:	26 c0       	rjmp	.+76     	; 0x166 <DIO_VoidSetPinValue+0xee>
				CLEAR_BIT(PORTC, DIO_u8Pin);
 11a:	25 b3       	in	r18, 0x15	; 21
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_VoidSetPinValue+0xae>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_VoidSetPinValue+0xaa>
 12a:	80 95       	com	r24
 12c:	82 23       	and	r24, r18
 12e:	85 bb       	out	0x15, r24	; 21
 130:	08 95       	ret
			break;
		case DIO_u8_PORTD:
			if(DIO_u8Val == DIO_PIN_HIGH)
 132:	41 30       	cpi	r20, 0x01	; 1
 134:	59 f4       	brne	.+22     	; 0x14c <DIO_VoidSetPinValue+0xd4>
				SET_BIT(PORTD, DIO_u8Pin);
 136:	22 b3       	in	r18, 0x12	; 18
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_VoidSetPinValue+0xca>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_VoidSetPinValue+0xc6>
 146:	82 2b       	or	r24, r18
 148:	82 bb       	out	0x12, r24	; 18
 14a:	08 95       	ret
			else if(DIO_u8Val == DIO_PIN_LOW)
 14c:	41 11       	cpse	r20, r1
 14e:	0b c0       	rjmp	.+22     	; 0x166 <DIO_VoidSetPinValue+0xee>
				CLEAR_BIT(PORTD, DIO_u8Pin);
 150:	22 b3       	in	r18, 0x12	; 18
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_VoidSetPinValue+0xe4>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_VoidSetPinValue+0xe0>
 160:	80 95       	com	r24
 162:	82 23       	and	r24, r18
 164:	82 bb       	out	0x12, r24	; 18
 166:	08 95       	ret

00000168 <DIO_u8GetPinValue>:
			return;	
	}
}

bool DIO_u8GetPinValue(u8 DIO_u8Port , u8 DIO_u8Pin){
	switch(DIO_u8Port)
 168:	86 30       	cpi	r24, 0x06	; 6
 16a:	a9 f0       	breq	.+42     	; 0x196 <DIO_u8GetPinValue+0x2e>
 16c:	18 f4       	brcc	.+6      	; 0x174 <DIO_u8GetPinValue+0xc>
 16e:	85 30       	cpi	r24, 0x05	; 5
 170:	31 f0       	breq	.+12     	; 0x17e <DIO_u8GetPinValue+0x16>
 172:	35 c0       	rjmp	.+106    	; 0x1de <DIO_u8GetPinValue+0x76>
 174:	87 30       	cpi	r24, 0x07	; 7
 176:	d9 f0       	breq	.+54     	; 0x1ae <DIO_u8GetPinValue+0x46>
 178:	88 30       	cpi	r24, 0x08	; 8
 17a:	29 f1       	breq	.+74     	; 0x1c6 <DIO_u8GetPinValue+0x5e>
 17c:	30 c0       	rjmp	.+96     	; 0x1de <DIO_u8GetPinValue+0x76>
	{
		case DIO_u8_PORTA:
			return GET_BIT(PINA, DIO_u8Pin);
 17e:	29 b3       	in	r18, 0x19	; 25
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_u8GetPinValue+0x20>
 184:	35 95       	asr	r19
 186:	27 95       	ror	r18
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_u8GetPinValue+0x1c>
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	20 fd       	sbrc	r18, 0
 190:	27 c0       	rjmp	.+78     	; 0x1e0 <DIO_u8GetPinValue+0x78>
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	08 95       	ret
			break;
		case DIO_u8_PORTB:
			return GET_BIT(PINB, DIO_u8Pin);
 196:	26 b3       	in	r18, 0x16	; 22
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_u8GetPinValue+0x38>
 19c:	35 95       	asr	r19
 19e:	27 95       	ror	r18
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_u8GetPinValue+0x34>
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	20 fd       	sbrc	r18, 0
 1a8:	1b c0       	rjmp	.+54     	; 0x1e0 <DIO_u8GetPinValue+0x78>
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	08 95       	ret
			break;
		case DIO_u8_PORTC:
			return GET_BIT(PINC, DIO_u8Pin);
 1ae:	23 b3       	in	r18, 0x13	; 19
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_u8GetPinValue+0x50>
 1b4:	35 95       	asr	r19
 1b6:	27 95       	ror	r18
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_u8GetPinValue+0x4c>
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	20 fd       	sbrc	r18, 0
 1c0:	0f c0       	rjmp	.+30     	; 0x1e0 <DIO_u8GetPinValue+0x78>
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	08 95       	ret
			break;
		case DIO_u8_PORTD:
			return GET_BIT(PIND, DIO_u8Pin);
 1c6:	20 b3       	in	r18, 0x10	; 16
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_u8GetPinValue+0x68>
 1cc:	35 95       	asr	r19
 1ce:	27 95       	ror	r18
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_u8GetPinValue+0x64>
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	20 fd       	sbrc	r18, 0
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <DIO_u8GetPinValue+0x78>
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	08 95       	ret
			break;
		default:
			return 0;
 1de:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 1e0:	08 95       	ret

000001e2 <main>:
#include "BIT_math.h"
#include "DIO_int.h"

int main(void)
{
    DIO_VoidInit();
 1e2:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_VoidInit>
    while (1) 
    {
		DIO_VoidSetPinValue(DIO_u8_PORTC, DIO_u8_PIN2, DIO_PIN_HIGH);
 1e6:	41 e0       	ldi	r20, 0x01	; 1
 1e8:	62 e0       	ldi	r22, 0x02	; 2
 1ea:	87 e0       	ldi	r24, 0x07	; 7
 1ec:	0e 94 3c 00 	call	0x78	; 0x78 <DIO_VoidSetPinValue>
		if(DIO_u8GetPinValue(DIO_u8_PORTC, DIO_u8_PIN2) == true){
 1f0:	62 e0       	ldi	r22, 0x02	; 2
 1f2:	87 e0       	ldi	r24, 0x07	; 7
 1f4:	0e 94 b4 00 	call	0x168	; 0x168 <DIO_u8GetPinValue>
 1f8:	88 23       	and	r24, r24
 1fa:	a9 f3       	breq	.-22     	; 0x1e6 <main+0x4>
			TOGGLE_BIT(PORTC, 7);
 1fc:	85 b3       	in	r24, 0x15	; 21
 1fe:	80 58       	subi	r24, 0x80	; 128
 200:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 202:	2f ef       	ldi	r18, 0xFF	; 255
 204:	83 ed       	ldi	r24, 0xD3	; 211
 206:	90 e3       	ldi	r25, 0x30	; 48
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	80 40       	sbci	r24, 0x00	; 0
 20c:	90 40       	sbci	r25, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <main+0x26>
 210:	00 c0       	rjmp	.+0      	; 0x212 <main+0x30>
 212:	00 00       	nop
 214:	e8 cf       	rjmp	.-48     	; 0x1e6 <main+0x4>

00000216 <_exit>:
 216:	f8 94       	cli

00000218 <__stop_program>:
 218:	ff cf       	rjmp	.-2      	; 0x218 <__stop_program>
