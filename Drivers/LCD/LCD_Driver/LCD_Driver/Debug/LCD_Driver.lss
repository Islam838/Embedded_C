
LCD_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000192  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000192  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a0d  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070e  00000000  00000000  00000d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000508  00000000  00000000  0000141b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001924  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000412  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000386  00000000  00000000  00001e02  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002188  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e9       	ldi	r30, 0x92	; 146
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  7a:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_VoidInit>:
#include "DIO_priv.h"
#include "stdbool.h"


void DIO_VoidInit(void){
	DDRA = DIO_u8_PORTA_DIR;
  82:	80 ef       	ldi	r24, 0xF0	; 240
  84:	8a bb       	out	0x1a, r24	; 26
	DDRB = DIO_u8_PORTB_DIR;
  86:	8e e0       	ldi	r24, 0x0E	; 14
  88:	87 bb       	out	0x17, r24	; 23
	DDRC = DIO_u8_PORTC_DIR;
  8a:	14 ba       	out	0x14, r1	; 20
	DDRD = DIO_u8_PORTD_DIR;
  8c:	11 ba       	out	0x11, r1	; 17
  8e:	08 95       	ret

00000090 <LCD_SendCommand>:
#include "LCD_cfg.h"
#include "LCD_priv.h"
	
void LCD_SendCommand(unsigned char comm){
	// defining the next inputs as commands (Execute) not data (Data)
	CLEAR_BIT(PORTB, LCD_U8_RS);
  90:	98 b3       	in	r25, 0x18	; 24
  92:	9d 7f       	andi	r25, 0xFD	; 253
  94:	98 bb       	out	0x18, r25	; 24
	// to write only commands
	CLEAR_BIT(PORTB, LCD_U8_RW);
  96:	98 b3       	in	r25, 0x18	; 24
  98:	9b 7f       	andi	r25, 0xFB	; 251
  9a:	98 bb       	out	0x18, r25	; 24
	
	// since we deal with 4 bits, we will send commands like (81)
	// on two parts upper nibble (80)(0101) & (1)(0001)
	// send upper nibble
	PORTA = comm & 0xF0;
  9c:	98 2f       	mov	r25, r24
  9e:	90 7f       	andi	r25, 0xF0	; 240
  a0:	9b bb       	out	0x1b, r25	; 27
	//send 1ms pulse to enable LCD to send the first 4 bits
	SET_BIT(PORTB, LCD_U8_EN);
  a2:	98 b3       	in	r25, 0x18	; 24
  a4:	98 60       	ori	r25, 0x08	; 8
  a6:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	ef e9       	ldi	r30, 0x9F	; 159
  aa:	ff e0       	ldi	r31, 0x0F	; 15
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <LCD_SendCommand+0x1c>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <LCD_SendCommand+0x22>
  b2:	00 00       	nop

	_delay_ms(1);
	CLEAR_BIT(PORTB, LCD_U8_EN);
  b4:	98 b3       	in	r25, 0x18	; 24
  b6:	97 7f       	andi	r25, 0xF7	; 247
  b8:	98 bb       	out	0x18, r25	; 24
	
	// send lower nibble (1)
	PORTA = comm << 4;
  ba:	82 95       	swap	r24
  bc:	80 7f       	andi	r24, 0xF0	; 240
  be:	8b bb       	out	0x1b, r24	; 27
	SET_BIT(PORTB, LCD_U8_EN);
  c0:	88 b3       	in	r24, 0x18	; 24
  c2:	88 60       	ori	r24, 0x08	; 8
  c4:	88 bb       	out	0x18, r24	; 24
  c6:	8f e9       	ldi	r24, 0x9F	; 159
  c8:	9f e0       	ldi	r25, 0x0F	; 15
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <LCD_SendCommand+0x3a>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <LCD_SendCommand+0x40>
  d0:	00 00       	nop
	_delay_ms(1);
	CLEAR_BIT(PORTB, LCD_U8_EN);
  d2:	88 b3       	in	r24, 0x18	; 24
  d4:	87 7f       	andi	r24, 0xF7	; 247
  d6:	88 bb       	out	0x18, r24	; 24
  d8:	08 95       	ret

000000da <LCD_SendData>:
}

void LCD_SendData(unsigned char data){
	// defining the next inputs as data (Data) not commands (Execute)
	SET_BIT(PORTB, LCD_U8_RS);
  da:	98 b3       	in	r25, 0x18	; 24
  dc:	92 60       	ori	r25, 0x02	; 2
  de:	98 bb       	out	0x18, r25	; 24
	// to write only commands
	CLEAR_BIT(PORTB, LCD_U8_RW);
  e0:	98 b3       	in	r25, 0x18	; 24
  e2:	9b 7f       	andi	r25, 0xFB	; 251
  e4:	98 bb       	out	0x18, r25	; 24
	
	// character a is 41 in asci, it is 8 bit data, so we need to divide by 2
	// send upper nibble
	PORTA = data & 0xF0;
  e6:	98 2f       	mov	r25, r24
  e8:	90 7f       	andi	r25, 0xF0	; 240
  ea:	9b bb       	out	0x1b, r25	; 27
	//send 1ms pulse to enable LCD to send the first 4 bits
	SET_BIT(PORTB, LCD_U8_EN);
  ec:	98 b3       	in	r25, 0x18	; 24
  ee:	98 60       	ori	r25, 0x08	; 8
  f0:	98 bb       	out	0x18, r25	; 24
  f2:	ef e9       	ldi	r30, 0x9F	; 159
  f4:	ff e0       	ldi	r31, 0x0F	; 15
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_SendData+0x1c>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <LCD_SendData+0x22>
  fc:	00 00       	nop
	_delay_ms(1);
	CLEAR_BIT(PORTB, LCD_U8_EN);
  fe:	98 b3       	in	r25, 0x18	; 24
 100:	97 7f       	andi	r25, 0xF7	; 247
 102:	98 bb       	out	0x18, r25	; 24
	
	// send lower nibble (1)
	PORTA = data << 4;
 104:	82 95       	swap	r24
 106:	80 7f       	andi	r24, 0xF0	; 240
 108:	8b bb       	out	0x1b, r24	; 27
	SET_BIT(PORTB, LCD_U8_EN);
 10a:	88 b3       	in	r24, 0x18	; 24
 10c:	88 60       	ori	r24, 0x08	; 8
 10e:	88 bb       	out	0x18, r24	; 24
 110:	8f e9       	ldi	r24, 0x9F	; 159
 112:	9f e0       	ldi	r25, 0x0F	; 15
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <LCD_SendData+0x3a>
 118:	00 c0       	rjmp	.+0      	; 0x11a <LCD_SendData+0x40>
 11a:	00 00       	nop
	_delay_ms(1);
	CLEAR_BIT(PORTB, LCD_U8_EN);
 11c:	88 b3       	in	r24, 0x18	; 24
 11e:	87 7f       	andi	r24, 0xF7	; 247
 120:	88 bb       	out	0x18, r24	; 24
 122:	08 95       	ret

00000124 <LCD_Init>:

	
void LCD_Init(void)
{
	// make sure enable is initialized by zero to be able to send one pulse in the commands or data
	CLEAR_BIT(PORTB, LCD_U8_EN);
 124:	88 b3       	in	r24, 0x18	; 24
 126:	87 7f       	andi	r24, 0xF7	; 247
 128:	88 bb       	out	0x18, r24	; 24
	// next 3 commands will do the 4 bit mode starting
	LCD_SendCommand(33);	
 12a:	81 e2       	ldi	r24, 0x21	; 33
 12c:	0e 94 48 00 	call	0x90	; 0x90 <LCD_SendCommand>
	LCD_SendCommand(32);
 130:	80 e2       	ldi	r24, 0x20	; 32
 132:	0e 94 48 00 	call	0x90	; 0x90 <LCD_SendCommand>
	LCD_SendCommand(28);	// configurations, check the readme
 136:	8c e1       	ldi	r24, 0x1C	; 28
 138:	0e 94 48 00 	call	0x90	; 0x90 <LCD_SendCommand>
	LCD_SendCommand(0x0e);	// display on.cursor on
 13c:	8e e0       	ldi	r24, 0x0E	; 14
 13e:	0e 94 48 00 	call	0x90	; 0x90 <LCD_SendCommand>
	LCD_SendCommand(0x01);	// Clear LCD
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	0e 94 48 00 	call	0x90	; 0x90 <LCD_SendCommand>
 148:	8f e3       	ldi	r24, 0x3F	; 63
 14a:	9f e1       	ldi	r25, 0x1F	; 31
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <LCD_Init+0x28>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LCD_Init+0x2e>
 152:	00 00       	nop
 154:	08 95       	ret

00000156 <LCD_PrintString>:
	_delay_ms(2);
}

void LCD_PrintString(char* Str_Print){
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	8c 01       	movw	r16, r24
	unsigned char i = 0;
 15e:	c0 e0       	ldi	r28, 0x00	; 0
	while(Str_Print[i] != 0){ //null character
 160:	03 c0       	rjmp	.+6      	; 0x168 <LCD_PrintString+0x12>
		LCD_SendData(Str_Print[i]);
 162:	0e 94 6d 00 	call	0xda	; 0xda <LCD_SendData>
		i++;
 166:	cf 5f       	subi	r28, 0xFF	; 255
	_delay_ms(2);
}

void LCD_PrintString(char* Str_Print){
	unsigned char i = 0;
	while(Str_Print[i] != 0){ //null character
 168:	f8 01       	movw	r30, r16
 16a:	ec 0f       	add	r30, r28
 16c:	f1 1d       	adc	r31, r1
 16e:	80 81       	ld	r24, Z
 170:	81 11       	cpse	r24, r1
 172:	f7 cf       	rjmp	.-18     	; 0x162 <LCD_PrintString+0xc>
		LCD_SendData(Str_Print[i]);
		i++;
	}
}
 174:	cf 91       	pop	r28
 176:	1f 91       	pop	r17
 178:	0f 91       	pop	r16
 17a:	08 95       	ret

0000017c <main>:
#include "DIO_int.h"
#include "LCD_int.h"

int main(void)
{	
    DIO_VoidInit();
 17c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VoidInit>
	LCD_Init();
 180:	0e 94 92 00 	call	0x124	; 0x124 <LCD_Init>
	
	LCD_PrintString("Hello");
 184:	80 e6       	ldi	r24, 0x60	; 96
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_PrintString>
 18c:	ff cf       	rjmp	.-2      	; 0x18c <main+0x10>

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
